name: Check PNU Schedule Changes # Назва вашого workflow

on:
  workflow_dispatch: # Дозволяє запускати вручну
  
  push: # Запускати при push у гілку main
    branches:
      - main # Важливо: дефіс і відступ для елемента списку

  schedule: # Запускати за розкладом
    # Розклади залишаються як були...
    - cron: '0 */3 * * *'  
    - cron: '05 13 * * *' 
    - cron: '27 13 * * *' 
    - cron: '32 13 * * *'
    - cron: '37 13 * * *' 
    - cron: '50 13 * * *' 
    - cron: '57 13 * * *' 

jobs:
  scrape-and-notify:
    runs-on: ubuntu-latest # Використовуємо останню версію Ubuntu

    permissions:
      contents: write # Надає дозвіл на запис у репозиторій (для коміту)

    steps:
      - name: Checkout repository # Крок 1: Завантажуємо код репозиторію
        uses: actions/checkout@v4

      - name: Set up Python # Крок 2: Встановлюємо Python
        # ... (без змін) ...
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies # Крок 3: Встановлюємо потрібні бібліотеки
        # ... (без змін) ...
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable 

      - name: Run scraper script and capture output # Крок 4: Запускаємо ваш головний скрипт
        # ... (без змін) ...
        id: run_script
        run: |
          echo "Running main-scraper.py..."
          python main-scraper.py | tee run_output.log 
          echo "Script finished."
          if grep -q "Знайдено зміни в розкладах:" run_output.log; then
            echo "CHANGES_FOUND=true" >> $GITHUB_ENV
            echo "::set-output name=changes_detected::true"
            echo "Changes detected by script."
          else
            echo "CHANGES_FOUND=false" >> $GITHUB_ENV
            echo "::set-output name=changes_detected::false"
            echo "No changes detected by script."
          fi

      - name: Extract change summary # Крок 5: Витягуємо опис змін для емейлу (якщо вони є)
        # ... (без змін) ...
        id: extract_summary
        if: env.CHANGES_FOUND == 'true' 
        run: |
          echo "Extracting change summary..."
          SUMMARY=$(sed -n '/Знайдено зміни в розкладах:/,$p' run_output.log | sed '1d' | grep '^\s*-\ ' | sed 's/^- //')
          SUMMARY=$(echo "$SUMMARY" | head -c 1000) 
          echo "CHANGES_SUMMARY<<EOF" >> $GITHUB_ENV
          echo "$SUMMARY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "Change summary extracted."
          cat run_output.log

      # --- ОНОВЛЕНИЙ КРОК ДЛЯ ВИПРАВЛЕННЯ ПОМИЛКИ PULL (з використанням stash) ---
      - name: Pull latest changes before auto-commit
        # Виконуємо цей крок, тільки якщо скрипт виявив зміни, бо лише тоді є що ховати (stash)
        if: steps.run_script.outputs.changes_detected == 'true' 
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          echo "Checking for local changes..."
          # Перевіряємо, чи є взагалі зміни для stash
          if ! git diff --quiet; then
            echo "Stashing local changes..."
            git stash 
          else
            echo "No local changes to stash."
          fi
          echo "Pulling latest changes with rebase..."
          # Виконуємо pull --rebase на (сподіваємось) чистому стані
          # Додаємо прапор --autostash, можливо, він допоможе
          git pull --rebase --autostash 
          echo "Applying stashed changes (if any)..."
          # Намагаємося повернути зміни зі сховища (якщо вони там були)
          # Використовуємо 'stash apply', щоб запис у stash залишився для можливої діагностики
          # || true - щоб крок не падав, якщо stash порожній
          git stash apply || true 
          echo "Pull and stash apply finished."
      # ----------------------------------------------------------------

      - name: Commit and push changes # Крок 6: Комітимо оновлений schedules_data.js (якщо він змінився)
        # ... (без змін) ...
        if: steps.run_script.outputs.changes_detected == 'true' 
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Автоматичне оновлення розкладу"
          file_pattern: schedules_data.js 
          commit_user_name: GitHub Actions Bot 
          commit_user_email: actions@github.com 
          commit_author: GitHub Actions Bot <actions@github.com>

      - name: Send notification email # Крок 7: Відправляємо емейл (якщо зміни знайдено)
        # ... (без змін) ...
        if: env.CHANGES_FOUND == 'true' 
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com 
          server_port: 465 
          secure: true 
          username: ${{ secrets.MAIL_USERNAME }} 
          password: ${{ secrets.MAIL_PASSWORD }} 
          subject: "Зміни в розкладі ПНУ!"
          to: clainygameryt@gmail.com 
          from: GitHub Actions Bot <${{ secrets.MAIL_USERNAME }}> 
          body: |
            Виявлено зміни в розкладі ПНУ!
            
            Зміни:
            ${{ env.CHANGES_SUMMARY }}

            Перегляньте деталі в репозиторії або на сайті ПНУ.
            Повний лог запуску доступний в GitHub Actions.
          priority: high
